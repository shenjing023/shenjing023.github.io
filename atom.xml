<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>023 Blog</title>
  <subtitle>成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/shenjing023/"/>
  <updated>2017-06-25T09:47:52.005Z</updated>
  <id>https://github.com/shenjing023/</id>
  
  <author>
    <name>神经023</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://github.com/shenjing023/2017/06/25/%E5%AD%A6%E4%B9%A0Scrapy%E5%85%A5%E9%97%A8/"/>
    <id>https://github.com/shenjing023/2017/06/25/学习Scrapy入门/</id>
    <published>2017-06-25T09:40:38.583Z</published>
    <updated>2017-06-25T09:47:52.005Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>title: 学习Scrapy入门</p>
<h2 id="tags-scrapy"><a href="#tags-scrapy" class="headerlink" title="tags: scrapy"></a>tags: scrapy</h2><h2 id="Scrapy介绍"><a href="#Scrapy介绍" class="headerlink" title="Scrapy介绍"></a>Scrapy介绍</h2><p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。<br>所谓网络爬虫，就是一个在网上到处或定向抓取数据的程序，当然，这种说法不够专业，更专业的描述就是，抓取特定网站网页的HTML数据。抓取网页的一般方法是，定义一个入口页面，然后一般一个页面会有其他页面的URL，于是从当前页面获取到这些URL加入到爬虫的抓取队列中，然后进入到新页面后再递归的进行上述的操作，其实说来就跟深度遍历或广度遍历一样。Scrapy 使用 Twisted这个异步网络库来处理网络通讯，架构清晰，并且包含了各种中间件接口，可以灵活的完成各种需求。</p>
<h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ord6anrvd.bkt.clouddn.com/201706251115_745.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>引擎(Scrapy Engine)，用来处理整个系统的数据流处理，触发事务。</li>
<li>调度器(Scheduler)，用来接受引擎发过来的请求，压入队列中，并在引擎再次请求的时候返回。</li>
<li>下载器(Downloader)，用于下载网页内容，并将网页内容返回给蜘蛛。</li>
<li>蜘蛛(Spiders)，蜘蛛是主要干活的，用它来制订特定域名或网页的解析规则。编写用于分析response并提取item(即获取到的item)或额外跟进的URL的类。 每个spider负责处理一个特定(或一些)网站。</li>
<li>项目管道(Item Pipeline)，负责处理有蜘蛛从网页中抽取的项目，他的主要任务是清晰、验证和存储数据。当页面被蜘蛛解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</li>
<li>下载器中间件(Downloader Middlewares)，位于Scrapy引擎和下载器之间的钩子框架，主要是处理Scrapy引擎与下载器之间的请求及响应。</li>
<li>蜘蛛中间件(Spider Middlewares)，介于Scrapy引擎和蜘蛛之间的钩子框架，主要工作是处理蜘蛛的响应输入和请求输出。</li>
<li>调度中间件(Scheduler Middlewares)，介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。<h2 id="爬取流程"><a href="#爬取流程" class="headerlink" title="爬取流程"></a>爬取流程</h2>上图绿线是数据流向，首先从初始URL开始，Scheduler会将其交给Downloader进行下载，下载之后会交给Spider进行分析，Spider分析出来的结果有两种：一种是需要进一步抓取的链接，这些东西会被传回Scheduler；另一种是需要保存的数据，它们则被送到Item Pipeline那里，那是对数据进行后期处理（详细分析、过滤、存储等）的地方。另外，在数据流动的通道里还可以安装各种中间件，进行必要的处理。<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2>Scrapy中的数据流由执行引擎控制，其过程如下:</li>
</ul>
<ol>
<li>引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该spider请求第一个要爬取的URL(s)。</li>
<li>引擎从Spider中获取到第一个要爬取的URL并在调度器(Scheduler)以Request调度。</li>
<li>引擎向调度器请求下一个要爬取的URL。</li>
<li>调度器返回下一个要爬取的URL给引擎，引擎将URL通过下载中间件(请求(request)方向)转发给下载器(Downloader)。</li>
<li>一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过下载中间件(返回(response)方向)发送给引擎。</li>
<li>引擎从下载器中接收到Response并通过Spider中间件(输入方向)发送给Spider处理。</li>
<li>Spider处理Response并返回爬取到的Item及(跟进的)新的Request给引擎。</li>
<li>引擎将(Spider返回的)爬取到的Item给Item Pipeline，将(Spider返回的)Request给调度器。</li>
<li>(从第二步)重复直到调度器中没有更多地request，引擎关闭该网站。<h2 id="Scrapy项目基本流程"><a href="#Scrapy项目基本流程" class="headerlink" title="Scrapy项目基本流程"></a>Scrapy项目基本流程</h2><h3 id="默认的Scrapy项目结构"><a href="#默认的Scrapy项目结构" class="headerlink" title="默认的Scrapy项目结构"></a>默认的Scrapy项目结构</h3>使用全局命令startproject创建项目<br>scrapy startproject tutorial  </li>
</ol>
</blockquote>
<p>即可自动创建官方标准的代码目录。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ord6anrvd.bkt.clouddn.com/201706251151_285.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>其中:</p>
<ul>
<li>tutorial/:该项目的python总模块</li>
<li>scrapy.cfg:项目的配置文件</li>
<li>tutorial/items.py:项目中的item文件，编写爬取的字段名称</li>
<li>tutorial/pipelines.py: 项目中的pipelines文件</li>
<li>utorial/settings.py: 项目的设置文件，较为重要</li>
<li>tutorial/spiders/: 放置spider代码的主目录</li>
</ul>
<h3 id="定义要抓取的数据"><a href="#定义要抓取的数据" class="headerlink" title="定义要抓取的数据"></a>定义要抓取的数据</h3><p>Item是保存爬取到的数据的容器，其实用方法和python字典类似，并且提供了额外保护机制来避免瓶邪错误导致的未定义字段错误。</p>
<h3 id="编写提取item数据的Spider"><a href="#编写提取item数据的Spider" class="headerlink" title="编写提取item数据的Spider"></a>编写提取item数据的Spider</h3><p>Spider是用户编写用于从单个网站(或者一些网站)爬取数据的类。<br>其包含了一个用于下载的初始URL，如何跟进网页中的链接以及如何分析页面中的内容， 提取生成 item 的方法。<br>为了创建一个Spider，必须继承 scrapy.Spider 类，且定义以下三个属性:</p>
<blockquote>
<ul>
<li>name:用于区别Spider，该名字必须是唯一的，不可以为不同的Spider设定相同的名字。</li>
<li>start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一， 后续的URL则从初始的URL获取到的数据中提取。</li>
<li>parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。</li>
</ul>
</blockquote>
<h3 id="进行爬取"><a href="#进行爬取" class="headerlink" title="进行爬取"></a>进行爬取</h3><p>执行项目命令crawl，启动Spider</p>
<blockquote>
<p>scrapy crawl tutorial</p>
</blockquote>
<p>在这个过程中：<br>Scrapy为Spider的 start_urls 属性中的每个URL创建了 scrapy.Request 对象，并将 parse 方法作为回调函数(callback)赋值给了Request。<br>Request对象经过调度，执行生成 scrapy.http.Response 对象并送回给spider parse() 方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: 学习Scrapy入门&lt;/p&gt;
&lt;h2 id=&quot;tags-scrapy&quot;&gt;&lt;a href=&quot;#tags-scrapy&quot; class=&quot;headerlink&quot; title=&quot;tags: scrapy&quot;&gt;&lt;/a&gt;tags: scrapy&lt;/h2&gt;&lt;h2 i
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解C++的动态绑定与静态绑定</title>
    <link href="https://github.com/shenjing023/2017/06/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C++%E7%9A%84%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/"/>
    <id>https://github.com/shenjing023/2017/06/13/深入理解C++的动态绑定与静态绑定/</id>
    <published>2017-06-13T13:31:47.822Z</published>
    <updated>2017-06-13T13:31:29.652Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;C++的多态性，使用了的动态绑定与静态绑定，理解它们的区别有助于更好的理解多态性，以及在变成过程中避免错误，需要理解四个名词：<br>1、对象的静态类型：对象在声明时采用的类型。是在编译期确定的。<br>2、对象的动态类型：目前所指对象的类型，是在运行期决定的。<br>&ensp;&ensp;对象的动态可以更改，但静态类型无法更改。关于对象的静态与动态类型，看一示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> B</div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> C:<span class="keyword">public</span> B</div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> D:<span class="keyword">public</span> B</div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line">D *pD=<span class="keyword">new</span> D();	<span class="comment">//pD的静态类型是它声明的类型D*，动态类型也是D*</span></div><div class="line">B *pB=pD;	<span class="comment">//pB的静态类型是它声明的类型B*，动态类型是pB所指向的对象pD的类型D*</span></div><div class="line">C *pC=<span class="keyword">new</span> C();</div><div class="line">pB=pC;	<span class="comment">//pB的动态类型是可以更改的，现在它的动态类型是C*</span></div></pre></td></tr></table></figure></p>
<p>3、静态绑定：绑定的是对象的静态类型，某特性（比如函数）依赖于对象的静态类型，发生在编译期。<br>4、动态绑定：绑定的是对象的动态类型，某特性（比如函数）依赖于对象的动态类型，发生在运行期。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> B</div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfun</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> C:<span class="keyword">public</span> B</div><div class="line">&#123;</div><div class="line">	<span class="comment">//子类重新定义了父类的no-virtual函数，这是一个不好的设计，会导致名称遮掩；这里只是为了说明动态绑定和静态绑定才这样使用</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfun</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> D:<span class="keyword">public</span> B</div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfun</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line">D *pD=<span class="keyword">new</span> D();</div><div class="line">B *pB=pD;</div></pre></td></tr></table></figure></p>
<p>让我们看一下，pD-&gt;doSomething()和pB-&gt;doSomething()调用的是同一个函数吗？<br>不是的，虽然pD和pB都指向同一个对象。因为函数doSomething是一个no-virtual函数，它是静态绑定的，也就是编译器会在编译期根据对象的静态类型来选择函数。pD的静态类型是D<em>，那么编译器在处理pD-&gt;doSomething()的时候会将它指向D::doSomething()。同理，pB的静态类型是B</em>，那pB-&gt;doSomething()调用的就是B::doSomething()。</p>
<p>让我们再来看一下，pD-&gt;vfun()和pB-&gt;vfun()调用的是同一个函数吗？<br>是的。因为vfun是一个虚函数，它动态绑定的，也就是说它绑定的是对象的动态类型，pB和pD虽然静态类型不同，但是他们同时指向一个对象，他们的动态类型是相同的，都是D*，所以，他们的调用的是同一个函数：D::vfun()。</p>
<p>上面都是针对对象指针的情况，对于引用（reference）的情况同样适用。</p>
<p>指针和引用的动态类型和静态类型可能会不一致，但是对象的动态类型和静态类型是一致的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">D D;</div><div class="line">D.doSomething()和D.vfun()永远调用的都是D::doSomething()和D::vfun()</div></pre></td></tr></table></figure></p>
<p>至于那些事动态绑定，那些事静态绑定，有篇文章总结的非常好：只有虚函数才使用的是动态绑定，其他的全部是静态绑定。</p>
<p>特别需要注意的地方当缺省参数和虚函数一起出现的时候情况有点复杂，极易出错。我们知道，虚函数是动态绑定的，但是为了执行效率，缺省参数是静态绑定的。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> B</div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfun</span><span class="params">(<span class="keyword">int</span> i=<span class="number">10</span>)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> D:<span class="keyword">public</span> B</div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfun</span><span class="params">(<span class="keyword">int</span> i=<span class="number">20</span>)</span></span>;</div><div class="line">&#125;</div><div class="line">D *pD=<span class="keyword">new</span> D();</div><div class="line">B *pB=pD;</div><div class="line">pD-&gt;vfun();</div><div class="line">pB-&gt;vfun();</div></pre></td></tr></table></figure>
<p>有上面的分析可知pD-&gt;vfun()和pB-&gt;vfun()调用都是函数D::vfun()，但是他们的缺省参数是多少？<br>分析一下，缺省参数是静态绑定的，pD-&gt;vfun()时，pD的静态类型是D*，所以它的缺省参数应该是20；同理，pB-&gt;vfun()的缺省参数应该是10。</p>
<p>摘自：<a href="https://www.oschina.net/question/54100_20313" target="_blank" rel="external">https://www.oschina.net/question/54100_20313</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;C++的多态性，使用了的动态绑定与静态绑定，理解它们的区别有助于更好的理解多态性，以及在变成过程中避免错误，需要理解四个名词：&lt;br&gt;1、对象的静态类型：对象在声明时采用的类型。是在编译期确定的。&lt;br&gt;2、对象的动态类型：目前所指对象的类型，是在运
    
    </summary>
    
    
      <category term="c++" scheme="https://github.com/shenjing023/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++读书笔记</title>
    <link href="https://github.com/shenjing023/2017/06/13/Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/shenjing023/2017/06/13/Effective C++读书笔记/</id>
    <published>2017-06-13T13:26:10.170Z</published>
    <updated>2017-06-13T13:33:29.002Z</updated>
    
    <content type="html"><![CDATA[<h3 id="条款02：尽量以const，enum，inline替换-define"><a href="#条款02：尽量以const，enum，inline替换-define" class="headerlink" title="条款02：尽量以const，enum，inline替换#define"></a>条款02：尽量以const，enum，inline替换#define</h3><blockquote>
<p><strong>请记住</strong></p>
<ul>
<li>对于单纯常量，最好以const对象或enums替换#define  </li>
<li>对于形似函数的宏(macros)，最好改用inline函数替换#define<br>###条款03：尽可能使用const<br>&ensp;&ensp;const可以用在classes外部修饰global或namespace作用域中的常量，或修饰文件、函数、或区块作用域(block space)中被声明为static的对象，也可以用它修饰classes内部的static和non-static成员变量。对于指针，可以指出指针自身、指针所指物，或两者都(或都不)是const：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> greeting[]=<span class="string">"hello"</span>;</div><div class="line"><span class="keyword">char</span> *p=greeting;		<span class="comment">//non-const pointer,non-const data</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *p=greeting;	<span class="comment">//non-const pointer,const data</span></div><div class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p=greeting;	<span class="comment">//const pointer,non-const data</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p=greeting;	<span class="comment">//const pointer,const data</span></div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>&ensp;&ensp;关键字const出现在<em>号左边，表示被指物是常量；出现在</em>号右边，表示指针自身是常量；出现在*号两边，表示被指物和指针两者都是常量。</p>
<blockquote>
<p><strong>请记住</strong></p>
<ul>
<li>将某些东西声明为const可帮助编译器侦测出错误用法，const可被施加于任何作用域的对象、函数参数、函数返回类型、成员函数本体。</li>
<li>编译器强制实施bitwise constness，但编写程序时应该使用“概念上的常量性”(conceptual constness)。</li>
<li>当const和non-const成员函数有着是指等价的实现时，另non-const版本调用const版本可避免代码重复。  </li>
</ul>
</blockquote>
<h3 id="条款4：确定对象使用前先被初始化"><a href="#条款4：确定对象使用前先被初始化" class="headerlink" title="条款4：确定对象使用前先被初始化"></a>条款4：确定对象使用前先被初始化</h3><p>&ensp;&ensp;有些情况下即使面对的成员变量属于内置类型(那么其初始值或赋值的成本相同)，也一定得使用初值列。如果成员变量是const或references，那就一定需要初值，不能被赋值(见条款5)。为避免需要记住成员变量何时必须在成员初值列中初始化，何时不需要，最简单的做法是：总是使用成员初值列，这样做有时候绝对必要，且有往往比赋值更高效。<br>&ensp;&ensp;C++有着十分固定的“成员初始化次序”，次序总是相同：base classes更早于其derived classes被初始化(见条款12)，而class的长远变量总是以其声明次序被初始化。当成员初值列中条件各个成员时，最好总是以其声明次序为次序。</p>
<h3 id="条款5：了解C-默默编写并调用哪些函数"><a href="#条款5：了解C-默默编写并调用哪些函数" class="headerlink" title="条款5：了解C++默默编写并调用哪些函数"></a>条款5：了解C++默默编写并调用哪些函数</h3><blockquote>
<p><strong>请记住</strong></p>
<ul>
<li>(c++98)编译器可以暗自为default构造函数、copy构造函数、copy assignment操作符，以及析构函数。(c++11)新添加了两个特殊成员函数:移动构造函数和移动赋值算子。</li>
</ul>
</blockquote>
<p>&ensp;&ensp;如果在一个“内含reference成员”的class内只吃赋值操作(assignment)，必须自定义copy assignment操作符。“内含const成员”的class也是一样，更改const成员是不合法的，所以编译器不知道如何在它自己生成的赋值函数内面对它们。最后还有一种情况：如果某个base classes将copy assignment操作符声明为private，编译器将拒绝为其derived classes生成一个copy assignment操作符。<br>&ensp;&ensp;c++11禁用拷贝构造函数和赋值构造函数，可在想要 “禁止使用” 的函数声明后加 “= delete”，而需要保留的加 “= default” 或者不采取操作。</p>
<h3 id="条款7：为多态基类声明virtual析构函数"><a href="#条款7：为多态基类声明virtual析构函数" class="headerlink" title="条款7：为多态基类声明virtual析构函数"></a>条款7：为多态基类声明virtual析构函数</h3><blockquote>
<p><strong>请记住</strong></p>
<ul>
<li>polymorphic（带多态性质的）base classes应该声明一个virtual析构函数。如果class带有任何virtual函数，它就应该拥有一个virtual析构函数。</li>
<li>Classes的设计目的如果不是作为base classes使用，或不是为了具备多态性（polymorphically），就不该声明析构函数。</li>
</ul>
</blockquote>
<h3 id="条款9：绝不在构造和析构过程中调用virtual函数"><a href="#条款9：绝不在构造和析构过程中调用virtual函数" class="headerlink" title="条款9：绝不在构造和析构过程中调用virtual函数"></a>条款9：绝不在构造和析构过程中调用virtual函数</h3><blockquote>
<p><strong>请记住</strong></p>
<ul>
<li>在构造和析构期间不要调用virtual函数，因为这类调用从不下降至derived class（比起当前执行构造函数和析构函数的那层）</li>
</ul>
</blockquote>
<h3 id="条款10：令operator-返回一个reference-to-this"><a href="#条款10：令operator-返回一个reference-to-this" class="headerlink" title="条款10：令operator=返回一个reference to *this"></a>条款10：令operator=返回一个reference to *this</h3><blockquote>
<p><strong>请记住</strong></p>
<ul>
<li>令赋值（assignment）操作符返回一个reference to *this。</li>
</ul>
</blockquote>
<h3 id="条款20：宁以pass-by-reference-to-const替换pass-by-value"><a href="#条款20：宁以pass-by-reference-to-const替换pass-by-value" class="headerlink" title="条款20：宁以pass-by-reference-to-const替换pass-by-value"></a>条款20：宁以pass-by-reference-to-const替换pass-by-value</h3><blockquote>
<p><strong>请记住</strong></p>
<ul>
<li>尽量以pass-by-reference-to-const替换pass-by-value。前者通常比较高效，并可避免切割问题（slicing problem）</li>
<li>以上规则并不适用于内置类型，以及STL的迭代器对象。对它们而言，pass-by-value往往比较合适</li>
</ul>
</blockquote>
<h3 id="条款36：绝不重新定义继承而来的non-virtual函数"><a href="#条款36：绝不重新定义继承而来的non-virtual函数" class="headerlink" title="条款36：绝不重新定义继承而来的non-virtual函数"></a>条款36：绝不重新定义继承而来的non-virtual函数</h3><h3 id="条款37：绝不重新定义继承而来的缺省参数值"><a href="#条款37：绝不重新定义继承而来的缺省参数值" class="headerlink" title="条款37：绝不重新定义继承而来的缺省参数值"></a>条款37：绝不重新定义继承而来的缺省参数值</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;条款02：尽量以const，enum，inline替换-define&quot;&gt;&lt;a href=&quot;#条款02：尽量以const，enum，inline替换-define&quot; class=&quot;headerlink&quot; title=&quot;条款02：尽量以const，enum，inlin
    
    </summary>
    
    
      <category term="Effective C++" scheme="https://github.com/shenjing023/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>python 3.5.2安装mysql驱动报错</title>
    <link href="https://github.com/shenjing023/2017/06/12/python%203.5.2%E5%AE%89%E8%A3%85mysql%E9%A9%B1%E5%8A%A8%E6%8A%A5%E9%94%99/"/>
    <id>https://github.com/shenjing023/2017/06/12/python 3.5.2安装mysql驱动报错/</id>
    <published>2017-06-12T14:24:27.628Z</published>
    <updated>2017-06-12T15:41:17.950Z</updated>
    
    <content type="html"><![CDATA[<p>python 3.5.2安装mysql驱动时出现如下异常:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ord6anrvd.bkt.clouddn.com/201706122121_412.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>这是由于官方驱动暂时只支持到python3.4所致，改用<a href="https://github.com/PyMySQL/PyMySQL/">pymysql</a></p>
<p>例子：<br>建表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span>(</div><div class="line">	<span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">	<span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">	<span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">	PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin</div><div class="line">AUTO_INCREMENT=<span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql.cursors</div><div class="line"><span class="comment">#connect to the database</span></div><div class="line">connection=pymysql.connect(host=<span class="string">'localhost'</span>,</div><div class="line">			    user=<span class="string">'user'</span>,</div><div class="line">			    password=<span class="string">'passwd'</span>,</div><div class="line">			    db=<span class="string">'db'</span>,</div><div class="line">			    charset=<span class="string">'utf8mb4'</span>,</div><div class="line">			    cursorclass=pymysql.cursors.DictCursor)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">	<span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</div><div class="line">		<span class="comment">#Create a new record</span></div><div class="line">		sql=<span class="string">"INSERT INTO `users` (`email`,`password`) VALUES (%s,%s)"</span></div><div class="line">		cursor.execute(sql,(<span class="string">'webmaster@python.org'</span>, <span class="string">'very-secret'</span>)</div><div class="line">	<span class="comment">#connection is not autocommit by default.So you must commit to save</span></div><div class="line">	<span class="comment">#your changes.</span></div><div class="line">	connection.commit()</div><div class="line">        <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</div><div class="line">	    <span class="comment">#Read a single record</span></div><div class="line">	    sql=<span class="string">"SELECT `id`,`password` FROM `users` WHERE `email`=%s"</span></div><div class="line">	    cursor.execute(sql,(<span class="string">'webmaster@python.org'</span>,))</div><div class="line">	    result=cursor.fetchone()</div><div class="line">	    print(result)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">	connection.close()</div></pre></td></tr></table></figure>
<p>This example will print:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;'password':'very-secret','id':1&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考文档 <a href="https://github.com/PyMySQL/PyMySQL/">https://github.com/PyMySQL/PyMySQL/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 3.5.2安装mysql驱动时出现如下异常:&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=
    
    </summary>
    
    
      <category term="mysql" scheme="https://github.com/shenjing023/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/shenjing023/2017/03/20/hello-world/"/>
    <id>https://github.com/shenjing023/2017/03/20/hello-world/</id>
    <published>2017-03-20T12:47:07.406Z</published>
    <updated>2017-03-20T15:30:34.309Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Postsadasdas"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="sjs" scheme="https://github.com/shenjing023/tags/sjs/"/>
    
  </entry>
  
</feed>
